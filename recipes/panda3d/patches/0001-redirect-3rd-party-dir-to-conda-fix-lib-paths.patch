From 2409b5944e5ec3c875eb7708327ac6e9a84f0b21 Mon Sep 17 00:00:00 2001
From: Olivier Roussel <olivier.roussel@inria.fr>
Date: Tue, 4 Mar 2025 18:05:20 +0100
Subject: [PATCH] redirect 3rd party dir to conda & fix lib paths

---
 makepanda/makepanda.py     | 197 +++++++++++++++++++------------------
 makepanda/makepandacore.py |   2 +-
 2 files changed, 100 insertions(+), 99 deletions(-)

diff --git a/makepanda/makepanda.py b/makepanda/makepanda.py
index 17699c3074..4b2581a31d 100755
--- a/makepanda/makepanda.py
+++ b/makepanda/makepanda.py
@@ -756,10 +756,10 @@ if (COMPILER == "MSVC"):
                 # dxerr needs this for __vsnwprintf definition.
                 LibName(pkg, 'legacy_stdio_definitions.lib')
 
-    if not PkgSkip("FREETYPE") and os.path.isdir(GetThirdpartyDir() + "freetype/include/freetype2"):
-        IncDirectory("FREETYPE", GetThirdpartyDir() + "freetype/include/freetype2")
+    if not PkgSkip("FREETYPE") and os.path.isdir(GetThirdpartyDir() + "include/freetype2"):
+        IncDirectory("FREETYPE", GetThirdpartyDir() + "include/freetype2")
 
-    IncDirectory("ALWAYS", GetThirdpartyDir() + "extras/include")
+    IncDirectory("ALWAYS", GetThirdpartyDir() + "include")
     LibName("WINSOCK", "wsock32.lib")
     LibName("WINSOCK2", "wsock32.lib")
     LibName("WINSOCK2", "ws2_32.lib")
@@ -786,144 +786,144 @@ if (COMPILER == "MSVC"):
     if (PkgSkip("DIRECTCAM")==0): LibName("DIRECTCAM", "quartz.lib")
     if (PkgSkip("DIRECTCAM")==0): LibName("DIRECTCAM", "odbc32.lib")
     if (PkgSkip("DIRECTCAM")==0): LibName("DIRECTCAM", "odbccp32.lib")
-    if (PkgSkip("MIMALLOC")==0): LibName("MIMALLOC", GetThirdpartyDir() + "mimalloc/lib/mimalloc-static.lib")
+    if (PkgSkip("MIMALLOC")==0): LibName("MIMALLOC", GetThirdpartyDir() + "lib/mimalloc-static.lib")
     if (PkgSkip("OPENSSL")==0):
-        if os.path.isfile(GetThirdpartyDir() + "openssl/lib/libpandassl.lib"):
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libpandassl.lib")
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libpandaeay.lib")
-        elif os.path.isfile(GetThirdpartyDir() + "openssl/lib/ssleay32.lib"):
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libeay32.lib")
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/ssleay32.lib")
+        if os.path.isfile(GetThirdpartyDir() + "lib/libpandassl.lib"):
+            LibName("OPENSSL", GetThirdpartyDir() + "lib/libpandassl.lib")
+            LibName("OPENSSL", GetThirdpartyDir() + "lib/libpandaeay.lib")
+        elif os.path.isfile(GetThirdpartyDir() + "lib/ssleay32.lib"):
+            LibName("OPENSSL", GetThirdpartyDir() + "lib/libeay32.lib")
+            LibName("OPENSSL", GetThirdpartyDir() + "lib/ssleay32.lib")
         else:
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libssl.lib")
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libcrypto.lib")
+            LibName("OPENSSL", GetThirdpartyDir() + "lib/libssl.lib")
+            LibName("OPENSSL", GetThirdpartyDir() + "lib/libcrypto.lib")
             LibName("OPENSSL", "crypt32.lib")
             LibName("OPENSSL", "ws2_32.lib")
     if (PkgSkip("PNG")==0):
-        if os.path.isfile(GetThirdpartyDir() + "png/lib/libpng16_static.lib"):
-            LibName("PNG", GetThirdpartyDir() + "png/lib/libpng16_static.lib")
+        if os.path.isfile(GetThirdpartyDir() + "lib/libpng16_static.lib"):
+            LibName("PNG", GetThirdpartyDir() + "lib/libpng16_static.lib")
         else:
-            LibName("PNG", GetThirdpartyDir() + "png/lib/libpng_static.lib")
+            LibName("PNG", GetThirdpartyDir() + "lib/libpng_static.lib")
     if (PkgSkip("TIFF")==0):
-        if os.path.isfile(GetThirdpartyDir() + "tiff/lib/libtiff.lib"):
-            LibName("TIFF", GetThirdpartyDir() + "tiff/lib/libtiff.lib")
+        if os.path.isfile(GetThirdpartyDir() + "lib/libtiff.lib"):
+            LibName("TIFF", GetThirdpartyDir() + "lib/libtiff.lib")
         else:
-            LibName("TIFF", GetThirdpartyDir() + "tiff/lib/tiff.lib")
+            LibName("TIFF", GetThirdpartyDir() + "lib/tiff.lib")
     if (PkgSkip("OPENEXR")==0):
-        if os.path.isfile(GetThirdpartyDir() + "openexr/lib/OpenEXRCore-3_1.lib"):
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/OpenEXR-3_1.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/IlmThread-3_1.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Imath-3_1.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Iex-3_1.lib")
-        elif os.path.isfile(GetThirdpartyDir() + "openexr/lib/OpenEXR-3_0.lib"):
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/OpenEXR-3_0.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/IlmThread-3_0.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Imath-3_0.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Iex-3_0.lib")
-        elif os.path.isfile(GetThirdpartyDir() + "openexr/lib/OpenEXR.lib"):
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/OpenEXR.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/IlmThread.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Imath.lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Iex.lib")
+        if os.path.isfile(GetThirdpartyDir() + "lib/OpenEXRCore-3_1.lib"):
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/OpenEXR-3_1.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/IlmThread-3_1.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Imath-3_1.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Iex-3_1.lib")
+        elif os.path.isfile(GetThirdpartyDir() + "lib/OpenEXR-3_0.lib"):
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/OpenEXR-3_0.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/IlmThread-3_0.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Imath-3_0.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Iex-3_0.lib")
+        elif os.path.isfile(GetThirdpartyDir() + "lib/OpenEXR.lib"):
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/OpenEXR.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/IlmThread.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Imath.lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Iex.lib")
         else:
             suffix = ""
-            if os.path.isfile(GetThirdpartyDir() + "openexr/lib/IlmImf-2_2.lib"):
+            if os.path.isfile(GetThirdpartyDir() + "lib/IlmImf-2_2.lib"):
                 suffix = "-2_2"
-            elif os.path.isfile(GetThirdpartyDir() + "openexr/lib/IlmImf-2_3.lib"):
+            elif os.path.isfile(GetThirdpartyDir() + "lib/IlmImf-2_3.lib"):
                 suffix = "-2_3"
-            elif os.path.isfile(GetThirdpartyDir() + "openexr/lib/IlmImf-2_4.lib"):
+            elif os.path.isfile(GetThirdpartyDir() + "lib/IlmImf-2_4.lib"):
                 suffix = "-2_4"
-                LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Imath" + suffix + ".lib")
-            if os.path.isfile(GetThirdpartyDir() + "openexr/lib/IlmImf" + suffix + "_s.lib"):
+                LibName("OPENEXR", GetThirdpartyDir() + "lib/Imath" + suffix + ".lib")
+            if os.path.isfile(GetThirdpartyDir() + "lib/IlmImf" + suffix + "_s.lib"):
                 suffix += "_s"  # _s suffix observed for OpenEXR 2.3 only so far
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/IlmImf" + suffix + ".lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/IlmThread" + suffix + ".lib")
-            LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Iex" + suffix + ".lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/IlmImf" + suffix + ".lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/IlmThread" + suffix + ".lib")
+            LibName("OPENEXR", GetThirdpartyDir() + "lib/Iex" + suffix + ".lib")
             if suffix == "-2_2":
-                LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Half.lib")
+                LibName("OPENEXR", GetThirdpartyDir() + "lib/Half.lib")
             else:
-                LibName("OPENEXR", GetThirdpartyDir() + "openexr/lib/Half" + suffix + ".lib")
-        IncDirectory("OPENEXR", GetThirdpartyDir() + "openexr/include/OpenEXR")
-        IncDirectory("OPENEXR", GetThirdpartyDir() + "openexr/include/Imath")
-    if (PkgSkip("JPEG")==0):     LibName("JPEG",     GetThirdpartyDir() + "jpeg/lib/jpeg-static.lib")
-    if (PkgSkip("ZLIB")==0):     LibName("ZLIB",     GetThirdpartyDir() + "zlib/lib/zlibstatic.lib")
-    if (PkgSkip("VRPN")==0):     LibName("VRPN",     GetThirdpartyDir() + "vrpn/lib/vrpn.lib")
-    if (PkgSkip("VRPN")==0):     LibName("VRPN",     GetThirdpartyDir() + "vrpn/lib/quat.lib")
-    if (PkgSkip("NVIDIACG")==0): LibName("CGGL",     GetThirdpartyDir() + "nvidiacg/lib/cgGL.lib")
-    if (PkgSkip("NVIDIACG")==0): LibName("CGDX9",    GetThirdpartyDir() + "nvidiacg/lib/cgD3D9.lib")
-    if (PkgSkip("NVIDIACG")==0): LibName("NVIDIACG", GetThirdpartyDir() + "nvidiacg/lib/cg.lib")
-    if (PkgSkip("FREETYPE")==0): LibName("FREETYPE", GetThirdpartyDir() + "freetype/lib/freetype.lib")
+                LibName("OPENEXR", GetThirdpartyDir() + "lib/Half" + suffix + ".lib")
+        IncDirectory("OPENEXR", GetThirdpartyDir() + "include/OpenEXR")
+        IncDirectory("OPENEXR", GetThirdpartyDir() + "include/Imath")
+    if (PkgSkip("JPEG")==0):     LibName("JPEG",     GetThirdpartyDir() + "lib/jpeg-static.lib")
+    if (PkgSkip("ZLIB")==0):     LibName("ZLIB",     GetThirdpartyDir() + "lib/zlibstatic.lib")
+    if (PkgSkip("VRPN")==0):     LibName("VRPN",     GetThirdpartyDir() + "lib/vrpn.lib")
+    if (PkgSkip("VRPN")==0):     LibName("VRPN",     GetThirdpartyDir() + "lib/quat.lib")
+    if (PkgSkip("NVIDIACG")==0): LibName("CGGL",     GetThirdpartyDir() + "lib/cgGL.lib")
+    if (PkgSkip("NVIDIACG")==0): LibName("CGDX9",    GetThirdpartyDir() + "lib/cgD3D9.lib")
+    if (PkgSkip("NVIDIACG")==0): LibName("NVIDIACG", GetThirdpartyDir() + "lib/cg.lib")
+    if (PkgSkip("FREETYPE")==0): LibName("FREETYPE", GetThirdpartyDir() + "lib/freetype.lib")
     if (PkgSkip("HARFBUZZ")==0):
-        LibName("HARFBUZZ", GetThirdpartyDir() + "harfbuzz/lib/harfbuzz.lib")
-        IncDirectory("HARFBUZZ", GetThirdpartyDir() + "harfbuzz/include/harfbuzz")
-    if (PkgSkip("FFTW")==0):     LibName("FFTW",     GetThirdpartyDir() + "fftw/lib/fftw3.lib")
-    if (PkgSkip("ARTOOLKIT")==0):LibName("ARTOOLKIT",GetThirdpartyDir() + "artoolkit/lib/libAR.lib")
-    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "opencv/lib/cv.lib")
-    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "opencv/lib/highgui.lib")
-    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "opencv/lib/cvaux.lib")
-    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "opencv/lib/ml.lib")
-    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "opencv/lib/cxcore.lib")
-    if (PkgSkip("FFMPEG")==0):   LibName("FFMPEG",   GetThirdpartyDir() + "ffmpeg/lib/avcodec.lib")
-    if (PkgSkip("FFMPEG")==0):   LibName("FFMPEG",   GetThirdpartyDir() + "ffmpeg/lib/avformat.lib")
-    if (PkgSkip("FFMPEG")==0):   LibName("FFMPEG",   GetThirdpartyDir() + "ffmpeg/lib/avutil.lib")
-    if (PkgSkip("SWSCALE")==0):  LibName("SWSCALE",  GetThirdpartyDir() + "ffmpeg/lib/swscale.lib")
-    if (PkgSkip("SWRESAMPLE")==0):LibName("SWRESAMPLE",GetThirdpartyDir() + "ffmpeg/lib/swresample.lib")
+        LibName("HARFBUZZ", GetThirdpartyDir() + "lib/harfbuzz.lib")
+        IncDirectory("HARFBUZZ", GetThirdpartyDir() + "include/harfbuzz")
+    if (PkgSkip("FFTW")==0):     LibName("FFTW",     GetThirdpartyDir() + "lib/fftw3.lib")
+    if (PkgSkip("ARTOOLKIT")==0):LibName("ARTOOLKIT",GetThirdpartyDir() + "lib/libAR.lib")
+    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "lib/cv.lib")
+    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "lib/highgui.lib")
+    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "lib/cvaux.lib")
+    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "lib/ml.lib")
+    if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "lib/cxcore.lib")
+    if (PkgSkip("FFMPEG")==0):   LibName("FFMPEG",   GetThirdpartyDir() + "lib/avcodec.lib")
+    if (PkgSkip("FFMPEG")==0):   LibName("FFMPEG",   GetThirdpartyDir() + "lib/avformat.lib")
+    if (PkgSkip("FFMPEG")==0):   LibName("FFMPEG",   GetThirdpartyDir() + "lib/avutil.lib")
+    if (PkgSkip("SWSCALE")==0):  LibName("SWSCALE",  GetThirdpartyDir() + "lib/swscale.lib")
+    if (PkgSkip("SWRESAMPLE")==0):LibName("SWRESAMPLE",GetThirdpartyDir() + "lib/swresample.lib")
     if (PkgSkip("FCOLLADA")==0):
-        LibName("FCOLLADA", GetThirdpartyDir() + "fcollada/lib/FCollada.lib")
-        IncDirectory("FCOLLADA", GetThirdpartyDir() + "fcollada/include/FCollada")
+        LibName("FCOLLADA", GetThirdpartyDir() + "lib/FCollada.lib")
+        IncDirectory("FCOLLADA", GetThirdpartyDir() + "include/FCollada")
     if (PkgSkip("ASSIMP")==0):
-        LibName("ASSIMP", GetThirdpartyDir() + "assimp/lib/assimp.lib")
-        if os.path.isfile(GetThirdpartyDir() + "assimp/lib/IrrXML.lib"):
-            LibName("ASSIMP", GetThirdpartyDir() + "assimp/lib/IrrXML.lib")
-        IncDirectory("ASSIMP", GetThirdpartyDir() + "assimp/include")
+        LibName("ASSIMP", GetThirdpartyDir() + "lib/assimp.lib")
+        if os.path.isfile(GetThirdpartyDir() + "lib/IrrXML.lib"):
+            LibName("ASSIMP", GetThirdpartyDir() + "lib/IrrXML.lib")
+        IncDirectory("ASSIMP", GetThirdpartyDir() + "include")
     if (PkgSkip("SQUISH")==0):
         if GetOptimize() <= 2:
-            LibName("SQUISH",   GetThirdpartyDir() + "squish/lib/squishd.lib")
+            LibName("SQUISH",   GetThirdpartyDir() + "lib/squishd.lib")
         else:
-            LibName("SQUISH",   GetThirdpartyDir() + "squish/lib/squish.lib")
+            LibName("SQUISH",   GetThirdpartyDir() + "lib/squish.lib")
     if (PkgSkip("ROCKET")==0):
-        LibName("ROCKET", GetThirdpartyDir() + "rocket/lib/RocketCore.lib")
-        LibName("ROCKET", GetThirdpartyDir() + "rocket/lib/RocketControls.lib")
+        LibName("ROCKET", GetThirdpartyDir() + "lib/RocketCore.lib")
+        LibName("ROCKET", GetThirdpartyDir() + "lib/RocketControls.lib")
         if (PkgSkip("PYTHON")==0):
-            LibName("ROCKET", GetThirdpartyDir() + "rocket/lib/" + SDK["PYTHONVERSION"] + "/boost_python-vc100-mt-1_54.lib")
+            LibName("ROCKET", GetThirdpartyDir() + "lib/" + SDK["PYTHONVERSION"] + "/boost_python-vc100-mt-1_54.lib")
         if (GetOptimize() <= 3):
-            LibName("ROCKET", GetThirdpartyDir() + "rocket/lib/RocketDebugger.lib")
+            LibName("ROCKET", GetThirdpartyDir() + "lib/RocketDebugger.lib")
     if (PkgSkip("OPENAL")==0):
-        LibName("OPENAL", GetThirdpartyDir() + "openal/lib/OpenAL32.lib")
-        if not os.path.isfile(GetThirdpartyDir() + "openal/bin/OpenAL32.dll"):
+        LibName("OPENAL", GetThirdpartyDir() + "lib/OpenAL32.lib")
+        if not os.path.isfile(GetThirdpartyDir() + "bin/OpenAL32.dll"):
             # Link OpenAL Soft statically.
             DefSymbol("OPENAL", "AL_LIBTYPE_STATIC")
     if (PkgSkip("ODE")==0):
-        LibName("ODE",      GetThirdpartyDir() + "ode/lib/ode_single.lib")
-        DefSymbol("ODE",    "dSINGLE", "")
+        LibName("ODE",      GetThirdpartyDir() + "lib/ode_double.lib")
+        DefSymbol("ODE",    "dDOUBLE", "")
     if (PkgSkip("FMODEX")==0):
         if (GetTargetArch() == 'x64'):
-            LibName("FMODEX",   GetThirdpartyDir() + "fmodex/lib/fmodex64_vc.lib")
+            LibName("FMODEX",   GetThirdpartyDir() + "lib/fmodex64_vc.lib")
         else:
-            LibName("FMODEX",   GetThirdpartyDir() + "fmodex/lib/fmodex_vc.lib")
+            LibName("FMODEX",   GetThirdpartyDir() + "lib/fmodex_vc.lib")
     if (PkgSkip("FLTK")==0 and RTDIST):
-        LibName("FLTK", GetThirdpartyDir() + "fltk/lib/fltk.lib")
+        LibName("FLTK", GetThirdpartyDir() + "lib/fltk.lib")
         if not PkgSkip("FLTK"):
             # If we have fltk, we don't need wx
             PkgDisable("WX")
     if (PkgSkip("WX")==0 and RTDIST):
-        LibName("WX",       GetThirdpartyDir() + "wx/lib/wxbase28u.lib")
-        LibName("WX",       GetThirdpartyDir() + "wx/lib/wxmsw28u_core.lib")
+        LibName("WX",       GetThirdpartyDir() + "lib/wxbase28u.lib")
+        LibName("WX",       GetThirdpartyDir() + "lib/wxmsw28u_core.lib")
         DefSymbol("WX",     "__WXMSW__", "")
         DefSymbol("WX",     "_UNICODE", "")
         DefSymbol("WX",     "UNICODE", "")
     if (PkgSkip("VORBIS")==0):
         for lib in ('ogg', 'vorbis', 'vorbisfile'):
-            path = GetThirdpartyDir() + "vorbis/lib/lib{0}_static.lib".format(lib)
+            path = GetThirdpartyDir() + "lib/lib{0}_static.lib".format(lib)
             if not os.path.isfile(path):
-                path = GetThirdpartyDir() + "vorbis/lib/{0}.lib".format(lib)
+                path = GetThirdpartyDir() + "lib/{0}.lib".format(lib)
             LibName("VORBIS", path)
     if (PkgSkip("OPUS")==0):
-        IncDirectory("OPUS", GetThirdpartyDir() + "opus/include/opus")
+        IncDirectory("OPUS", GetThirdpartyDir() + "include/opus")
         for lib in ('ogg', 'opus', 'opusfile'):
-            path = GetThirdpartyDir() + "opus/lib/lib{0}_static.lib".format(lib)
+            path = GetThirdpartyDir() + "lib/lib{0}_static.lib".format(lib)
             if not os.path.isfile(path):
-                path = GetThirdpartyDir() + "opus/lib/{0}.lib".format(lib)
+                path = GetThirdpartyDir() + "lib/{0}.lib".format(lib)
             LibName("OPUS", path)
     for pkg in MAYAVERSIONS:
         if (PkgSkip(pkg)==0):
@@ -976,13 +976,14 @@ if (COMPILER == "MSVC"):
             LibName("SPEEDTREE",  "glu32.lib")
         IncDirectory("SPEEDTREE", SDK["SPEEDTREE"] + "/Include")
     if (PkgSkip("BULLET")==0):
+        IncDirectory("BULLET", GetThirdpartyDir() + "include/bullet")
         suffix = '.lib'
-        if GetTargetArch() == 'x64' and os.path.isfile(GetThirdpartyDir() + "bullet/lib/BulletCollision_x64.lib"):
+        if GetTargetArch() == 'x64' and os.path.isfile(GetThirdpartyDir() + "lib/BulletCollision_x64.lib"):
             suffix = '_x64.lib'
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/LinearMath" + suffix)
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/BulletCollision" + suffix)
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/BulletDynamics" + suffix)
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/BulletSoftBody" + suffix)
+        LibName("BULLET", GetThirdpartyDir() + "lib/LinearMath" + suffix)
+        LibName("BULLET", GetThirdpartyDir() + "lib/BulletCollision" + suffix)
+        LibName("BULLET", GetThirdpartyDir() + "lib/BulletDynamics" + suffix)
+        LibName("BULLET", GetThirdpartyDir() + "lib/BulletSoftBody" + suffix)
 
 if (COMPILER=="GCC"):
     PkgDisable("MIMALLOC") # no discernable benefit over glibc
diff --git a/makepanda/makepandacore.py b/makepanda/makepandacore.py
index 74a4307a29..336d776295 100644
--- a/makepanda/makepandacore.py
+++ b/makepanda/makepandacore.py
@@ -28,7 +28,7 @@ MAINTHREAD = threading.current_thread()
 OUTPUTDIR = "built"
 CUSTOM_OUTPUTDIR = False
 THIRDPARTYBASE = None
-THIRDPARTYDIR = None
+THIRDPARTYDIR = os.environ['LIBRARY_PREFIX'] + '/'
 OPTIMIZE = "3"
 VERBOSE = False
 LINK_ALL_STATIC = False

