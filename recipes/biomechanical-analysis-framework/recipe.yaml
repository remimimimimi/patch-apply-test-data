context:
  name: "biomechanical-analysis-framework"
  cxx_name: "libbiomechanical-analysis-framework"
  python_name: "biomechanical-analysis-framework-python"
  kpi_name: "biomechanical-analysis-framework-kpi"
  version: "0.2.1"

recipe:
  name: ${{ name }}
  version: ${{ version }}

source:
  - url: "https://github.com/ami-iit/${{ name }}/archive/refs/tags/v${{ version }}.tar.gz"
    sha256: "18ae2dffac2f2724224c6f020f52ffd29115a35ed6c63a10d2ba8cafce248d4a"
    patches:
      - 81.patch

build:
  number: 1

outputs:
  - package:
      name: ${{ cxx_name }}
    build:
      script:
        - if: unix
          then: build_cxx.sh
        - if: win
          then: build_cxx.bat
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - cmake
        - pkg-config
        - ninja
      host:
        - if: linux
          then: libgl-devel
        - spdlog
        - manif
        - eigen
        - idyntree
        - libyarp
        - libbipedal-locomotion-framework
        - catch2
      run_exports:
        - ${{ pin_subpackage(cxx_name, upper_bound='x.x.x') }}
    tests:
      - package_contents:
          lib:
            - BiomechanicalAnalysisFrameworkIK
            - BiomechanicalAnalysisFrameworkLogging
          include:
            - BiomechanicalAnalysis/IK/InverseKinematics.h
            - BiomechanicalAnalysis/Logging/Logger.h
      - script:
          - cmake-package-check BiomechanicalAnalysisFramework --targets BiomechanicalAnalysis::IK BiomechanicalAnalysis::ID BiomechanicalAnalysis::CommonConversions BiomechanicalAnalysis::Logging
        requirements:
          run:
            - cmake-package-check
            - ${{ compiler('c') }}
            - ${{ compiler('cxx') }}


  - package:
      name: ${{ python_name }}
    build:
      script:
        - if: unix
          then: build_py.sh
        - if: win
          then: build_py.bat
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - cmake
        - pkg-config
        - ninja
        - if: build_platform != target_platform
          then:
            - cross-python_${{ target_platform }}
            - python
            # Workaround for https://github.com/conda-forge/pybind11-feedstock/pull/94#issuecomment-2033804227
            - pybind11 <2.12.0
            - pybind11-abi
            - pytest
            # Workaround for https://github.com/conda-forge/qt-main-feedstock/issues/273
            - qt6-main
      host:
        - if: linux
          then: libgl-devel
        - ${{ pin_subpackage(cxx_name, exact=true) }}
        - python
        # Workaround for https://github.com/conda-forge/pybind11-feedstock/pull/94#issuecomment-2033804227
        - pybind11 <2.12.0
        - pybind11-abi
        - pytest
      run:
        - ${{ pin_subpackage(cxx_name, exact=true) }}
        - python

  - package:
      name: ${{ kpi_name }}
    build:
      # This should be noarch, but it is just easier to package it as no-noarch  package as it is a dependency on a no-noarch package
      script: ${{ PYTHON }} -m pip install --no-deps --no-build-isolation ./baf_kpi -vv
      python:
        entry_points:
          - baf-kpi-analyzer = baf_kpi.main:main
    requirements:
      build:
        - if: build_platform != target_platform
          then:
            - cross-python_${{ target_platform }}
            - python
      host:
        - python
        - wheel
        - setuptools >=45
        - setuptools-scm >=6.2
        - pip
      run:
        - python
        - numpy
        - matplotlib-base
        - pandas
        - scipy
        - h5py
        - idyntree
        - rich
        - joblib
        - meshcat-python
        - resolve-robotics-uri-py
    tests:
      - python:
          imports:
            - baf_kpi
          pip_check: true

  - package:
      name: ${{ name }}
    requirements:
      run:
        - ${{ pin_subpackage(cxx_name, exact=true) }}
        - ${{ pin_subpackage(python_name, upper_bound='x.x.x') }}
        - ${{ pin_subpackage(kpi_name, upper_bound='x.x.x') }}
      run_exports:
        - ${{ pin_subpackage(cxx_name, upper_bound='x.x.x') }}
    tests:
      - script:
          - cmake-package-check BiomechanicalAnalysisFramework --targets BiomechanicalAnalysis::IK BiomechanicalAnalysis::ID BiomechanicalAnalysis::CommonConversions BiomechanicalAnalysis::Logging
        requirements:
          run:
            - cmake-package-check
            - ${{ compiler('c') }}
            - ${{ compiler('cxx') }}

about:
  homepage: https://github.com/ami-iit/biomechanical-analysis-framework
  repository: https://github.com/ami-iit/biomechanical-analysis-framework
  license: "BSD-3-Clause"
  license_file: "LICENSE"
  summary: "Set of C++ libraries that can be used to estimate a human kinematics and dynamics quantities."
  description: |
    This feedstock packages the biomechanical-analysis-framework set of libraries and it provides the following outputs:
      * `libbiomechanical-analysis-framework` : Package that contains the C++ libraries.
      * `biomechanical-analysis-framework-python` : Package that contains the Python bindings of the C++ libraries.
      * `biomechanical-analysis-framework-kpi` : Package that contains the pure Python package containing the code to compute biomechanical KPIs.
      * `biomechanical-analysis-framework` : Meta-package that install all the aforementioned packages.

extra:
  feedstock-name: biomechanical-analysis-framework
  recipe-maintainers:
    - traversaro
    - davidegorbani
